<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;
use App\Services\BinanceService;
use React\EventLoop\Factory;
use React\EventLoop\LoopInterface;
use Ratchet\Client\connect;
use function Ratchet\Client\connect;

class BinanceStreamCommand extends Command
{
    /**
     * Nombre del comando
     */
    protected $signature = 'binance:stream';

    /**
     * Descripción
     */
    protected $description = 'Conecta al User Data Stream de Binance y escucha eventos en tiempo real. Ademas, reconecta automaticamente si la conexion se pierde';

    
    /**
     * Ejecutar el comando
     */
    public function handle(BinanceService $binanceService)
    {
        $listenKey = $binanceService->getCachedListenKey();

        if (!$listenKey) {
            $this->error('No hay listenKey válida. Ejecute primero el método para crear una nueva.');
            return;
        }

        $wsUrl = "wss://stream.binance.com:9443/ws/{$listenKey}";

        $this->info("Conectando a Binance WebSocket: {$wsUrl}");
        Log::info("Conectando a Binance WebSocket: {$wsUrl}");

        $loop = Factory::create();

        $loop->addPeriodicTimer(30 * 60, function () use ($binanceService) {
            // Cada 30 minutos refrescamos la listenKey
            $binanceService->keepAlive();
            Log::info('ListenKey renovada automáticamente.');
        });

        connect($wsUrl, [], [], $loop)->then(
            function ($conn) use ($loop) {
                $conn->on('message', function ($msg) {
                    $data = json_decode($msg, true);

                    if (isset($data['e'])) {
                        $event = $data['e'];
                        Log::info("Evento recibido: {$event}", $data);

                        // Ejemplo: detectar cambios de balance
                        if ($event === 'balanceUpdate') {
                            // Aquí podrías llamar a tu webhook o API interna
                            Log::info('Balance actualizado', $data);
                        }
                    } else {
                        Log::debug('Mensaje recibido sin campo "e"', $data ?? []);
                    }
                });

                $conn->on('close', function ($code = null, $reason = null) use ($loop) {
                    Log::warning("Conexión cerrada ({$code}): {$reason}");
                    $loop->stop();
                });

                Log::info('Conexión WebSocket establecida.');
            },
            function ($e) use ($loop) {
                Log::error("Error de conexión al WebSocket: " . $e->getMessage());
                $loop->stop();
            }
        );

        $loop->run();
    }
}
